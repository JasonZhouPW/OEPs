<source lang="csharp">
  OEP: 5
  Title: Non-fungible Token Standard
  Author: tanyuan <tanyuan666@gmail.com>, zhoupw <zhoupw@gmail.com>, tonyclarking<tonyclarking@gmail.com>, blckchan<1258176714@qq.com>
  Type: Standard
  Status: Accepted
  Created: 2018-07-26
</source>

==Abstract==

The OEP-5 Proposal is a standard interface for NFTs, this standard allows for the implementation of a standard API for tokens within smart contracts.

==Motivation==

A standard token interface of NFTs, allows token on ONT to be convenient used by other applications.

==Specification==

===Basic Methods===

====name====

<source lang="csharp">
public static string name()
</source>

Returns the name of the NFTs - e.g. "My Non-Fungibles".

====symbol====
<source lang="csharp">
public static string symbol()
</source>

Returns a short string symbol of the token - e.g. <code>"MNFT"</code>.

This symbol SHOULD be short (3-8 characters is recommended), with no whitespace characters or new-lines and SHOULD be limited to the uppercase latin alphabet (i.e. the 26 letters used in English).

====totalSupply====
<source lang="csharp">
public static BigInteger totalSupply()
</source>
Returns the total number of NFTs.

====balanceOf====

<source lang="csharp">
public static BigInteger balanceOf(byte[] address)
</source>

Returns the number of NFTs assigned to <code>address</code>.

The parameter <code>address</code> SHOULD be a 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

===Ownership Methods===
==== ownerOf====
<source lang="csharp">
public static byte[] ownerOf(byte[] tokenId)
</source>
Returns the address currently marked as the owner of <code>tokenId</code>.If the <code>tokenId</code> cann't query an owner address,<code>tokenId</code> SHOULD be string or bytearray.
this method SHOULD <code>throw</code> an exception.

====transfer====
<source lang="csharp">
public static bool transfer(byte[] to, byte[] tokenId)
</source>

Transfers an NFTs of tokens from the <code>from</code> account to the <code>to</code> account.
<code>tokenId</code> SHOULD be string or bytearray.
<code>to</code> SHOULD be 20-byte address. If not, this method SHOULD <code>throw</code> an exception.

====transferMulti====
<source lang="csharp">
public static bool TransferMulti(object[] args)

public struct State
{
     public byte[] To;
     public byte[] TokenId;
}
</source>

The transferMulti allows transfer multiple NFTs from multiple <code>from</code> to multiple <code>to</code> multiple times.The parameter is object array, the object is <code>State</code> struct.<code>To</code> is transfer receiver, which
also SHOULD be 20-byte address.<code>tokenId</code> SHOULD be string or bytearray. If any of transfer fail, all of the transfers SHOULD be failed, and the method SHOULD <code>throw</code> an exception.


====approve====
<source lang="csharp">
public static bool approve(byte[] to, byte[] tokeId)
</source>

The approve allows to grant an NFTs to<code>to</code> account multiple times.If this function is called again it overwrites <code>to</code> or <code>tokenId</code>.<code>tokenId</code> SHOULD be string or bytearray.
<code>to</code> SHOULD be 20-byte addresses. If not, this method SHOULD <code>throw</code> an exception.

====takeOwnership====
<source lang="csharp">
public static bool takeOwnership(byte[] to, byte[] tokenId)
</source>
Either the token owner or the approved account can assign the ownership of the Non-fungible with ID <code>tokenId</code> to <code>to</code> address. <code>to</code> SHOULD be 20-byte addresses.<code>tokenId</code> SHOULD be string or bytearray. If not, this method SHOULD <code>throw</code> an exception.

====tokenMetadata====
<source lang="csharp">
public static byte[] tokenMetadata(byte[] tokenId)
</source>
Returns the url referencing an external resource that contains metadata about the NFT associated with tokenId.<code>tokenId</code> SHOULD be string or bytearray. this method is OPTIONAL, but if you don't implement this method, the browser can't get basic info about the token.

The url info string MUST be an IPFS or HTTP(S) base path.<br/>
Metadata JSON Schema:<br/>
* name (required) - The name contain the UTF-8 encoded name of specific NFT, which SHOULD be short (3-8 characters is recommended)
* image (optional) - If the image exist, it MUST contain a PNG, JPEG, or JPG image with at least 300 pixels of detail in each dimension. (1:1 image is recommended)
* description (optional) - If the description exist, it MUST contain a UTF-8 encoded textual description of the asset. The description SHOULD be 1500 characters or less.
* other metadata (optional) - other extension information.

===Events===
====transfer====
<source lang="csharp">
public static event transfer(byte[] from, byte[] to, byte[] tokenId)
</source>
MUST trigger when tokens are transferred, including zero value transfers.

A token contract which creates new NFTs MUST trigger a <code>transfer</code> event with the <code>from</code> address set to <code>null</code>.

A token contract which burns tokens MUST trigger a <code>transfer</code> event with the <code>to</code> address set to <code>null</code> when tokens are burned.

====approval====
<source lang="csharp">
public static event approval(byte[] from, byte[] to, byte[] tokenId)
</source>
MUST trigger on any successful call to approve.

===Implementation===
====Example implementations are available at====
OEP-5 Template: [[https://github.com/ONT-Avocados/python-template/blob/master/OEP5Sample/OEP5Sample.py | Python Template]]
